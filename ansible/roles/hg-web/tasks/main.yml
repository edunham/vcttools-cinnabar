---

- name: determine if running in Docker
  stat: path=/vct
  register: vct_dir

- name: install system packages
  yum: name={{ item }} state=present
  with_items:
    # This is likely already installed, but needed for Docker.
    - cronie
    - httpd
    # To build mod_wsgi from source so it can be placed in virtualenvs.
    - httpd-devel
    # Secures processes, especially moz.build evaluation.
    - libcgroup
    # We use logrotate to control log files
    - logrotate
    - openssh-clients
    - openssh-server
    # Machines are RHEL 6 or CentOS 6, which has Python 2.6 installed by
    # default. The Python 2.7 packages from IUS don't conflict with the
    # system Python.
    - python27
    # Needed for hg user to execute mozbuild-eval as root.
    - rsyslog
    - sudo
    - tar

# Some packages aren't available on an public yum repo. Fetch them from
# a public server and install them manually. This is a bit hacky, but it
# gets the job done.
- name: download Mozilla rpms
  get_url: url=https://s3-us-west-2.amazonaws.com/moz-packages/CentOS6/{{ item.path }}
           dest=/var/tmp/{{ item.path}}
           sha256sum={{ item.sha256 }}
  with_items:
    - { path: mercurial-3.4.1-0.x86_64.rpm, sha256: 4e6190232ae217aacc894c0baf8e61900cb55d4ee0406a09a22b70cb9c6dfbd0 }
    # The version of virtualenv in the IUS repo isn't compatible with
    # peep because it has a pip that is too new. See
    # https://github.com/erikrose/peep/pull/94. Install an old version
    # until peep is compatible.
    - { path: python27-virtualenv-12.0.7-1.ius.el6.noarch.rpm, sha256: a3f6c80d7a83798e4d64827d81dbcc39c1c44ae66c0afa4866bc477baad2cc2c }

- name: install Mozilla rpms
  command: yum localinstall -y /var/tmp/mercurial-3.4.1-0.x86_64.rpm /var/tmp/python27-virtualenv-12.0.7-1.ius.el6.noarch.rpm

# We need to ensure that a hg user/group exists to own many resources.
# The uid and gid match what comes from Puppet, since Puppet manages
# users in production.
- name: hg group exists
  group: name=hg
         gid=5507

- name: create hg user
  user: name=hg
        group=hg
        uid=5507
        shell=/bin/bash
        comment="Hg user"

# The hg user performs replication via SSHing into a central server.
# Set up its SSH configuration.
- name: create .ssh directory for hg user
  file: path=/home/hg/.ssh
        owner=hg
        group=hg
        mode=0750
        state=directory

- name: install hg user ssh config
  copy: src=hg-ssh-config
        dest=/home/hg/.ssh/config
        owner=hg
        group=hg
        mode=0640

- name: ensure known hosts file for hg user exists
  file: path=/home/hg/.ssh/known_hosts
        state=touch
        owner=hg
        group=hg
        mode=0640

- name: install rsyslog policy for hg
  copy: src=rsyslog-hg.conf
        dest=/etc/rsyslog.d/hg.conf
        owner=root
        group=root
        mode=0644
  notify: restart rsyslogd

# There are /repo_local and /repo directories for historical reasons.
# Back in the day /repo was mounted from NFS and was a read-only
# filesystem and /repo_local was a local, read-write copy. Now, /repo
# just has symlinks to /repo_local. We carry forward the legacy
# configuration until we take the effort to move files around on the
# servers.
#
# There is also an unused level of indirection. The servers used to host
# multiple vhosts and subdirectories of /repo and /repo_local
# corresponded to the vhost they were serving.

- name: create root directories for hg files
  file: path={{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - /repo
    - /repo_local

- name: create directories for hg files
  file: path={{ item }} state=directory owner=hg group=hg mode=0755
  with_items:
    - /repo_local/mozilla/mozilla
    - /repo_local/mozilla/scripts
    - /repo_local/mozilla/webroot_wsgi
    # make_user_wsgi_dirs.sh expects this to exist.
    - /repo_local/mozilla/webroot_wsgi/users

- name: symlink /repo/hg to /repo_local/mozilla
  file: src=/repo_local/mozilla dest=/repo/hg state=link

# We need to add a ssh auhorized_keys to ensure the master can connect
# in to trigger a mirror pull
- name: add authorized_keys for hg user
  authorized_key: user=hg
                  key_options='command="/usr/local/bin/mirror-pull -t /repo_local/mozilla/mozilla $SSH_ORIGINAL_COMMAND",no-pty,no-x11-forwarding,no-agent-forwarding'
                  key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDoGUKeheEfmCr0GXxt3DyFXjmxzE9y1z0l1laNjNl6X++1ymj9MwrrSPewDJ+fzKWl+/1tFf9LwHlnndJib4DKrcqdzvJeU1CYBQ+xt9sk0DZdizcaCpYJI4Dpk9ysGLUOd3km9dp7LsXjJ/c6NQdZpICOnCWvBOwTgg++wUfBCymMpi2mab+QhUjDcBp/LUbJOtvEE/cppvDLMATmJfIaaGCNfka2TGVRec744UC6RqahZ/mcxe6TnltqujYjo1yBMGJ4gS2rAw5U+0nLqDiBpc6+uU3sjSsAe6/UrwfE+uu6vPFyFTaitK5oHHIt2MDJHkJruyJLNtd3ooqtyXcf"

# We run a lot of our Python out of our virtualenvs because that is how you
# are supported to do Python.
- name: create virtualenvs to run hgweb
  command: /usr/bin/virtualenv-2.7 {{ item }} creates={{ item }}
  with_items:
    - "{{ venv_hgweb }}"
    - "{{ venv_replication }}"
    - "{{ venv_tools }}"

# We install peep from our own copy because this is more secure than
# relying on network installations.
- name: copy peep.py
  copy: src=files/peep.py dest={{ item }}/bin/peep mode=0755 owner=root group=root
  with_items:
    - "{{ venv_hgweb }}"
    - "{{ venv_replication }}"
    - "{{ venv_tools }}"

- name: configure shebang in peep
  replace: dest={{ item }}/bin/peep
           regexp='^#!\/usr\/bin\/env python$'
           replace='#!{{ item }}/bin/python2.7'
  with_items:
    - "{{ venv_hgweb }}"
    - "{{ venv_replication }}"
    - "{{ venv_tools }}"

- name: copy hgweb requirements.txt
  copy: src=requirements-hgweb.txt
        dest={{ venv_hgweb }}/requirements.txt
        mode=0644
        owner=root
        group=root

- name: copy replication requirements.txt
  copy: src=requirements-replication.txt
        dest={{ venv_replication}}/requirements.txt
        mode=0644
        owner=root
        group=root

- name: copy tools requirements.txt
  copy: src=requirements-tools.txt
        dest={{ venv_tools}}/requirements.txt
        mode=0644
        owner=root
        group=root

- name: populate virtualenvs
  pip: requirements={{ item }}/requirements.txt
       executable={{ item }}/bin/peep
  with_items:
    - "{{ venv_hgweb }}"
    - "{{ venv_replication }}"
    - "{{ venv_tools }}"

- name: set up version-control-tools repo (server only)
  hg: repo=https://hg.mozilla.org/hgcustom/version-control-tools
      dest=/repo/hg/version-control-tools
      revision={{ lookup('file', '../../../../.vctnode') }}
      force=yes
      purge=yes
      executable={{ venv_hgweb }}/bin/hg
  when: vct_dir.stat.exists == False

# The hg module's purge doesn't delete ignored files. Boo. Force that
# because old .pyc files may cause chaos.
- name: delete ignored files from version-control-tools repo
  command: "{{ venv_hgweb }}/bin/hg --config extensions.purge= -R /repo/hg/version-control-tools purge --all"
  when: vct_dir.stat.exists == False

- name: rsync version-control-tools repo (Docker only)
  command: /usr/bin/rsync -a --delete-after /vct/ /repo/hg/version-control-tools/
  when: vct_dir.stat.exists == True

# pip doesn't reinstall the same version unless --upgrade is passed.
# We need to pass --no-deps to prevent dependencies from getting pulled
# in. If we did pull in dependencies, there is a potential MITM since
# peep secures download of 3rd party packages.
# --force-reinstall is there for completeness.
- name: install vcsreplicator into virtualenv
  command: /repo/hg/venv_replication/bin/pip install --upgrade --no-deps --force-reinstall /repo/hg/version-control-tools/pylib/vcsreplicator

# Various hgrc files reference hooks via "python:mozhghooks.*". Install
# a link in the replication virtualenv to the path to these hooks inside
# the version-control-tools checkout.
- name: add mozhghooks to virtualenv
  copy: dest=/repo/hg/venv_replication/lib/python2.7/site-packages/mozhghooks.pth
        content=/repo/hg/version-control-tools/hghooks
        owner=root
        group=root
        mode=0644

# Settings from this file are inherited by every hg command run on the
# system.
- name: install global hgrc
  copy: src=hgrc dest=/etc/mercurial/hgrc mode=0644 owner=root group=root

# We control httpd.conf for features like server-status
- name: install httpd.conf file
  template: src=httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf

# Install the vhost.conf file for hg.mozilla.org
- name: install vhost config
  template: src=vhost.conf.j2 dest=/etc/httpd/conf.d/hg-vhost.conf

# Install and manage the mod_wsgi config file
- name: install wsgi config
  copy: content="LoadModule wsgi_module /repo/hg/venv_hgweb/lib/python2.7/site-packages/mod_wsgi/server/mod_wsgi-py27.so" dest=/etc/httpd/conf.d/wsgi.conf

- name: configure httpd to start at system startup
  command: /sbin/chkconfig --level 2345 httpd on

- name: ensure httpd service is started
  service: name=httpd state=started
  # Don't do this on Docker because it has its own mechanism for
  # starting.
  when: vct_dir.stat.exists == False

- name: install mirror-pull script
  template: src=mirror-pull.j2
            dest=/usr/local/bin/mirror-pull
            owner=root
            group=root
            mode=0755

- name: install scripts for supporting replication
  copy: src={{ item }}
        dest=/usr/local/bin/{{ item }}
        owner=root
        group=root
        mode=0755
  with_items:
    - lockfile

- name: install mirroring SSH key
  copy: dest=/etc/mercurial/mirror
        content="{{ mirror_private_key }}"
        owner=hg
        group=hg
        mode=0400

# We don't use the known_hosts module because it can't purge extra
# entries from the file. We should never have extra entries and extra
# entries could arguably be a security risk, so replacing the entire
# file content is acceptable.
- name: register SSH host keys for mirror host
  template: dest=/home/hg/.ssh/known_hosts
            src=known_hosts.j2
            owner=hg
            group=hg
            mode=640

# /repo/hg/webroot_wsgi has most of its content vendored inside
# version-control-tools. The content of the users/ directory is generated
# by a CRON that runs every few minutes.
- name: synchronize wsgi files
  command: /usr/bin/rsync -a --delete --filter='P users/' /repo/hg/version-control-tools/hgwsgi/ /repo/hg/webroot_wsgi/

- name: set ownership of wsgi files
  command: /bin/chown -R hg:hg /repo/hg/webroot_wsgi

- name: install the script that creates user repo wsgi files
  copy: src=make_user_wsgi_dirs.sh dest=/usr/local/bin/make_user_wsgi_dirs.sh mode=0755

- name: install the cronjob that runs the user repo wsgi file creation script
  cron: minute="*/2" user=hg job="/usr/local/bin/make_user_wsgi_dirs.sh" name="Generate user wsgi files"

# Create and manage httpd log resources
- name: make logdir
  file: path=/var/log/httpd/hg.mozilla.org state=directory mode=0755

- name: add logrotate httpd config
  copy: src=logrotate.conf dest=/etc/logrotate.d/hg-httpd-logrotate

# Create and manage hg log resources
- name: make log dir
  file: path=/var/log/hg
        state=directory
        mode=0755
        owner=root
        group=root

- name: add logrotate hg config
  copy: src=logrotate.hg.conf dest=/etc/logrotate.d/hg

# TODO ideally this is integrated into logrotate.
# We schedule for UTC 0100 to catch any long-running requests that started
# on the previous UTC day.
- name: create CRON to generate daily Mercurial log files
  cron: name='Daily Mercurial log data'
        user=root
        job='/repo/hg/scripts/outputif /repo/hg/version-control-tools/hgext/serverlog/scripts/generate-daily-logs.py'
        day=*
        month=*
        minute=0
        hour=1

# logrotate is heavily biased towards rotating logs. We don't explicitly do
# rotation for /var/log/hg/parsed.YYYY-MM-DD, so logrotate doesn't work as a
# tool. We've written out own script to do the compression and deletion.

- name: install parsed hg logs cleanup script
  copy: src=cleanup-parsed-hg-logs
        dest=/repo/hg/scripts/cleanup-parsed-hg-logs
        owner=root
        group=root
        mode=0755

- name: create CRON to compress and delete old parsed Mercurial log files
  cron: name='Clean old parsed Mercurial logs'
        user=root
        job='/repo/hg/scripts/outputif /repo/hg/scripts/cleanup-parsed-hg-logs'
        day=*
        month=*
        minute=12
        hour=2

- name: create CRON to ensure file permissions are sane
  cron: name='Adjust repository permissions'
        user=root
        job='/repo/hg/version-control-tools/scripts/normalize-hgweb-permissions /repo/hg/mozilla'
        day=*
        month=*
        minute=0
        hour=4

# moz.build evaluation occurs in a chroot with a specific control group
# to limit potential for danger. We have a dedicated user and establish
# a cgroup policy that all processes for that user go in the limited
# cgroup.
#
# This doesn't currently work in Docker because we don't have cgroups
# exposed to our Docker containers.

- name: create mozbuild user
  user: name=mozbuild

- name: control group for mozbuild evaluation
  copy: src=cgconfig-mozbuild.conf
        dest=/etc/cgconfig.d/mozbuild.conf
        owner=root
        group=root
        mode=0664

- name: configure cgconfig to run at system startup
  command: /sbin/chkconfig --level 2345 cgconfig on

  notify: restart cgconfig
  when: vct_dir.stat.exists == False

- name: install control group rules
  copy: src=cgrules.conf
        dest=/etc/cgrules.conf
        owner=root
        group=root
        mode=0664

- name: start control group rules service
  service: name=cgred state=started enabled=yes
  when: vct_dir.stat.exists == False

- name: directories for mozbuild chroot
  file: path={{ item }} state=directory owner=root group=root mode=0775
  with_items:
    - /repo/hg/chroot_mozbuild

- name: check if chroot is available
  stat: path={{ vct }}/chroot_mozbuild/chroot.tar.gz
  register: chroot_mozbuild
  delegate_to: 127.0.0.1

# Files dropped from the chroot will still exist. This shouldn't be
# problematic. Ignore it until it becomes a problem.
- name: upload and extract chroot archive
  unarchive: src={{ vct }}/chroot_mozbuild/chroot.tar.gz
             dest=/repo/hg/chroot_mozbuild
  when: chroot_mozbuild.stat.exists

# It is important for this binary to be located *outside* the chroot
# because if code inside the chroot is able to modify the binary, it
# will be able to execute as root given the sudo policy below.
- name: upload chroot evaluator binary
  copy: src={{ vct }}/chroot_mozbuild/mozbuild-eval
        dest=/usr/local/bin/mozbuild-eval
        owner=root
        group=root
        mode=0755
  when: chroot_mozbuild.stat.exists

- name: install sudoers policy for mozbuild-eval
  copy: src=sudoers-mozbuild-eval
        dest=/etc/sudoers.d/mozbuild-eval
        owner=root
        group=root
        mode=0440

- name: mount point for repos
  file: path={{ item }} state=directory owner=hg group=hg mode=0755
  with_items:
    - /repo/hg/chroot_mozbuild/repo/hg/mozilla

# In order to get a read-only bind mount, we have to first do a regular
# bind mount then do a remount. We can't work this magic with the
# "mount" ansible module, so do it by hand.
- name: bind mount repositories into mozbuild chroot (servers only)
  shell: mount -o bind /repo/hg/mozilla /repo/hg/chroot_mozbuild/repo/hg/mozilla && mount -o remount,ro,bind /repo/hg/mozilla /repo/hg/chroot_mozbuild/repo/hg/mozilla creates=/repo/hg/chroot_mozbuild/repo/hg/mozilla/mozilla-central
  when: vct_dir.stat.exists == False

- name: create devices mount inside mozbuild chroot (servers only)
  mount: name=/repo/hg/chroot_mozbuild/dev
         src=none
         fstype=tmpfs
         state=present
         fstab=/repo/hg/chroot_mozbuild/etc/fstab
  when: vct_dir.stat.exists == False

- name: configure /dev/urandom in mozbuild chroot (servers only)
  command: mknod -m 444 /repo_local/mozilla/chroot_mozbuild/dev/urandom c 1 9 creates=/repo_local/mozilla/chroot_mozbuild/dev/urandom
  when: vct_dir.stat.exists == False

- name: synchronize hg templates
  synchronize: src={{ vct }}/hgtemplates/ dest=/repo/hg/hg_templates/ recursive=yes delete=yes

- name: advertise current v-c-t changeset in hgweb
  replace: dest=/repo/hg/hg_templates/gitweb_mozilla/footer.tmpl
           regexp={{ item.search }}
           replace={{ item.replace }}
  with_items:
    - { search: VCTNODE, replace: "{{ vct_node | mandatory }}" }
    - { search: DEPLOYDATE, replace: "{{ ansible_date_time.iso8601 }}" }

- name: adjust file permissions for hg templates
  command: /bin/chown -R hg:hg /repo/hg/hg_templates

- name: copy vcsreplicator config
  template: src=vcsreplicator.ini.j2
            dest=/etc/mercurial/vcsreplicator.ini
            owner=root
            group=root
            mode=0644

- name: directory for vcsreplicator logs
  file: path=/var/log/vcsreplicator
        state=directory
        owner=root
        group=root
        mode=0755

- name: add replication daemon config to supervisor
  copy: src=supervisor-vcsreplicator.conf
        dest=/etc/supervisor.d/vcsreplicator.conf
        owner=root
        group=root
        mode=0644
  notify: reread supervisor

# TODO restart vcsreplicator daemon.

- name: create Nagios config directory
  file: path=/etc/nagios/nrpe.d
        state=directory
        owner=root
        group=root
        mode=0755

- name: install check_vcsreplicator_lag NRPE config
  copy: src=check_vcsreplicator_lag.cfg
        dest=/etc/nagios/nrpe.d/check_vcsreplicator_lag.cfg
        owner=root
        group=root
        mode=0644
  notify: restart nrpe

# Pull in tasks shared between hg-ssh and hg-web.
# This should run last to ensure all preconditions are met.
- include: ../../../tasks/hgmo-extensions.yml
