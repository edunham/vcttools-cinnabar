---

# We obtain Python 2.7 packages from the IUS Community repositories.
# More info is at https://iuscommunity.org/pages/Repos.html.
# Packages in this repo typically have their version in the package
# name. So, we shouldn't accidentally pick up packages from this repo.
#
# We download and verify the checksum of the RPMs otherwise we are
# susceptible to a MitM attack.
- name: download IUS community configuration RPMs (RedHat 6)
  get_url: url=https://dl.iuscommunity.org/pub/ius/stable/Redhat/6/x86_64/{{ item.name }}
           dest=/var/tmp/{{ item.dest }}
           sha256sum={{ item.sha256 }}
  with_items:
    - { name: epel-release-6-5.noarch.rpm, dest: epel-release-6-5.noarch.rpm, sha256: 1eac9bf24ae252ae4117a309391b532da3f139e4d0eb8ab384a08f5fc0526593 }
    - { name: ius-release-1.0-14.ius.el6.noarch.rpm, dest: ius-release-1.0-14.rpm, sha256: 147b8d584cff9cb4abc6332999998dc24873fddb0a28b7f505fe993e6331e67c }
  when: ansible_distribution == 'Red Hat Enterprise Linux'

- name: download IUS community configuration RPMs (CentOS 6)
  get_url: url=https://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/{{ item.name }}
           dest=/var/tmp/{{ item.dest }}
           sha256sum={{ item.sha256 }}
  with_items:
    - { name: epel-release-6-5.noarch.rpm, dest: epel-release-6-5.noarch.rpm, sha256: 157da55870a119e39cd2aa3d31e3e340b13b3960b6d5b897a48248c38fe8e1b5 }
    - { name: ius-release-1.0-14.ius.centos6.noarch.rpm, dest: ius-release-1.0-14.rpm, sha256: c2ed9a03f6cbb630a7b4fcdb69a35ddcc4b5d805fbfbd66018996f8df3caa792 }
  when: ansible_distribution == 'CentOS'

- name: configure IUS Community Repos
  command: yum localinstall -y /var/tmp/epel-release-6-5.noarch.rpm /var/tmp/ius-release-1.0-14.rpm

- name: install system packages
  yum: name={{ item }} state=present
  with_items:
    # To build mod_wsgi from source so it can be placed in virtualenvs.
    - httpd-devel
    # mod_wsgi installed from system until switched over to venv
    - mod_wsgi
    # Python dependencies need to be installed until we switch to venv
    - python-simplejson
    - python-argparse
    # We use logrotate to control log files
    - logrotate
    # Machines are RHEL 6 or CentOS 6, which has Python 2.6 installed by
    # default. The Python 2.7 packages from IUS don't conflict with the
    # system Python.
    - python27
    - python27-virtualenv

# We need to ensure that a hg user exists to own many resources
- name: create hg user
  user: name=hg

# The hg user performs replication via SSHing into a central server.
# Set up its SSH configuration.
- name: create .ssh directory for hg user
  file: path=/home/hg/.ssh
        owner=hg
        group=hg
        mode=0750
        state=directory

- name: install hg user ssh config
  copy: src=hg-ssh-config
        dest=/home/hg/.ssh/config
        owner=hg
        group=hg
        mode=0640

- name: ensure known hosts file for hg user exists
  file: path=/home/hg/.ssh/known_hosts
        state=touch
        owner=hg
        group=hg
        mode=0640

# There are /repo_local and /repo directories for historical reasons.
# Back in the day /repo was mounted from NFS and was a read-only
# filesystem and /repo_local was a local, read-write copy. Now, /repo
# just has symlinks to /repo_local. We carry forward the legacy
# configuration until we take the effort to move files around on the
# servers.
#
# There is also an unused level of indirection. The servers used to host
# multiple vhosts and subdirectories of /repo and /repo_local
# corresponded to the vhost they were serving.
- name: create directories for hg files
  file: path={{ item }} state=directory owner=hg group=hg mode=0755
  with_items:
    - /repo_local/mozilla/mozilla
    - /repo

- name: symlink /repo/hg to /repo_local/mozilla
  file: src=/repo_local/mozilla dest=/repo/hg state=link

# We need to add a ssh auhorized_keys to ensure the master can connect
# in to trigger a mirror pull
- name: add authorized_keys for hg user
  authorized_key: user=hg
                  key_options='command="/usr/local/bin/mirror-pull -t /repo_local/mozilla/mozilla $SSH_ORIGINAL_COMMAND",no-pty,no-x11-forwarding,no-agent-forwarding'
                  key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDoGUKeheEfmCr0GXxt3DyFXjmxzE9y1z0l1laNjNl6X++1ymj9MwrrSPewDJ+fzKWl+/1tFf9LwHlnndJib4DKrcqdzvJeU1CYBQ+xt9sk0DZdizcaCpYJI4Dpk9ysGLUOd3km9dp7LsXjJ/c6NQdZpICOnCWvBOwTgg++wUfBCymMpi2mab+QhUjDcBp/LUbJOtvEE/cppvDLMATmJfIaaGCNfka2TGVRec744UC6RqahZ/mcxe6TnltqujYjo1yBMGJ4gS2rAw5U+0nLqDiBpc6+uU3sjSsAe6/UrwfE+uu6vPFyFTaitK5oHHIt2MDJHkJruyJLNtd3ooqtyXcf"

# We run hgweb out of a virtualenv because that's how you are supposed
# to do Python.
- name: create virtualenv to run hgweb
  command: /usr/bin/virtualenv-2.7 {{ venv_hgweb }} creates={{ venv_hgweb }}

# We install peep from our own copy because this is more secure than
# relying on network installations.
- name: copy peep.py
  copy: src=files/peep.py dest={{ venv_hgweb }}/bin/peep mode=0755 owner=root group=root

- name: configure shebang in peep
  replace: dest={{ venv_hgweb }}/bin/peep
           regexp='^#!\/usr\/bin\/env python$'
           replace='#!{{ venv_hgweb }}/bin/python2.7'

- name: copy requirements.txt
  copy: src=requirements.txt dest={{ venv_hgweb }}/requirements.txt mode=0644 owner=root group=root

- name: populate hgweb virtualenv
  pip: requirements={{ venv_hgweb }}/requirements.txt executable={{ venv_hgweb }}/bin/peep

- name: set up version-control-tools repo
  hg: repo=https://hg.mozilla.org/hgcustom/version-control-tools
      dest=/repo/hg/version-control-tools
      revision={{ lookup('file', '../../../../.vctnode') }}
      force=yes
      purge=yes
      executable={{ venv_hgweb }}/bin/hg

# The hg module's purge doesn't delete ignored files. Boo. Force that
# because old .pyc files may cause chaos.
- name: delete ignored files from version-control-tools repo
  command: "{{ venv_hgweb }}/bin/hg --config extensions.purge= -R /repo/hg/version-control-tools purge --all"

# Settings from this file are inherited by every hg command run on the
# system.
- name: install global hgrc
  copy: src=hgrc dest=/etc/mercurial/hgrc mode=0644 owner=root group=root

# We control httpd.conf for features like server-status
- name: install httpd.conf file
  template: src=httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf

# Install the vhost.conf file for hg.mozilla.org
- name: install vhost config
  template: src=vhost.conf.j2 dest=/etc/httpd/conf.d/hg-vhost.conf

# Install and manage the mod_wsgi config file
- name: install wsgi config
  copy: content="LoadModule wsgi_module /repo/hg/venv_hgweb/lib/python2.7/site-packages/mod_wsgi/server/mod_wsgi-py27.so" dest=/etc/httpd/conf.d/wsgi.conf

# Install the user repo wsgi creation script, set up a cronjob for it
- name: install the script that creates user repo wsgi files
  copy: src=make_user_wsgi_dirs.sh dest=/usr/local/bin/make_user_wsgi_dirs.sh mode=0755

- name: install the cronjob that runs the user repo wsgi file creation script
  cron: minute="*/2" user=hg job="/usr/local/bin/make_user_wsgi_dirs.sh" name="Generate user wsgi files"

# These files were historically managed by hand and developed
# inconsistent ownership. Ensure they have consistent and proper
# ownership.
- name: set ownership of wsgi files
  command: /bin/chown -R hg:hg /repo/hg/webroot_wsgi

# Create and manage httpd log resources
- name: make logdir
  file: path=/var/log/httpd/hg.mozilla.org state=directory mode=0755

- name: add logrotate httpd config
  copy: src=logrotate.conf dest=/etc/logrotate.d/hg-httpd-logrotate

# Create and manage hg log resources
- name: make log dir
  file: path=/var/log/hg
        state=directory
        mode=0755
        owner=root
        group=root

- name: add logrotate hg config
  copy: src=logrotate.hg.conf dest=/etc/logrotate.d/hg

# TODO ideally this is integrated into logrotate.
# We schedule for UTC 0100 to catch any long-running requests that started
# on the previous UTC day.
- name: create CRON to generate daily Mercurial log files
  cron: name='Daily Mercurial log data'
        user=root
        job='/repo/hg/scripts/outputif /repo/hg/version-control-tools/hgext/serverlog/scripts/generate-daily-logs.py'
        day=*
        month=*
        minute=0
        hour=1

- name: create CRON to ensure file permissions are sane
  cron: name='Adjust repository permissions'
        user=root
        job='/repo/hg/version-control-tools/scripts/normalize-hgweb-permissions /repo/hg/mozilla'
        day=*
        month=*
        minute=0
        hour=4
