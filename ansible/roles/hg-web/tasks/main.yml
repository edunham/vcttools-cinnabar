---

- name: determine if running in Docker
  stat: path=/vct
  register: vct_dir

- name: install system packages
  yum: name={{ item }} state=present
  with_items:
    # This is likely already installed, but needed for Docker.
    - cronie
    # To compile hg-experimental extensions.
    - gcc-c++
    - httpd
    # To build mod_wsgi from source so it can be placed in virtualenvs.
    - httpd-devel
    # Provides `setcap` utility.
    - libcap
    # Secures processes, especially moz.build evaluation.
    - libcgroup
    # To compile hg-experimental extensions.
    - lz4-devel
    # We use logrotate to control log files
    - logrotate
    - openssh-clients
    - openssh-server
    # To compile hg-experimental extensions.
    - openssl-devel
    - python-devel
    - rsync
    # Needed for hg user to execute mozbuild-eval as root.
    - rsyslog
    - sudo
    - tar

- name: install system packages
  yum: name={{ item }} state=present
  with_items:
    - libcgroup-tools

- name: install global ssh config
  copy: src=ssh_config
        dest=/etc/ssh/ssh_config
        owner=root
        group=root
        mode=0640

# We need to ensure that a hg user/group exists to own many resources.
# The uid and gid match what comes from Puppet, since Puppet manages
# users in production.
- name: hg group exists
  group: name=hg
         gid=5507

- name: create hg user
  user: name=hg
        group=hg
        uid=5507
        shell=/bin/bash
        comment="Hg user"

# The hg user performs replication via SSHing into a central server.
# Set up its SSH configuration.
- name: create .ssh directory for hg user
  file: path=/home/hg/.ssh
        owner=hg
        group=hg
        mode=0750
        state=directory

- name: install hg user ssh config
  copy: src=hg-ssh-config
        dest=/home/hg/.ssh/config
        owner=hg
        group=hg
        mode=0640

- name: ensure known hosts file for hg user exists
  file: path=/home/hg/.ssh/known_hosts
        state=touch
        owner=hg
        group=hg
        mode=0640

- name: install rsyslog policy for hg
  copy: src=rsyslog-hg.conf
        dest=/etc/rsyslog.d/hg.conf
        owner=root
        group=root
        mode=0644
  notify: restart rsyslogd

# There are /repo_local and /repo directories for historical reasons.
# Back in the day /repo was mounted from NFS and was a read-only
# filesystem and /repo_local was a local, read-write copy. Now, /repo
# just has symlinks to /repo_local. We carry forward the legacy
# configuration until we take the effort to move files around on the
# servers.
#
# There is also an unused level of indirection. The servers used to host
# multiple vhosts and subdirectories of /repo and /repo_local
# corresponded to the vhost they were serving.

- name: create root directories for hg files
  file: path={{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - /repo
    - /repo_local

- name: create directories for hg files
  file: path={{ item }} state=directory owner=hg group=hg mode=0755
  with_items:
    - /repo_local/mozilla/mozilla
    - /repo_local/mozilla/scripts
    - /repo_local/mozilla/webroot_wsgi
    # make_user_wsgi_dirs.sh expects this to exist.
    - /repo_local/mozilla/webroot_wsgi/users
    - /var/hg

- name: symlink /repo/hg to /repo_local/mozilla
  file: src=/repo_local/mozilla dest=/repo/hg state=link

# We need to add a ssh auhorized_keys to ensure the master can connect
# in to trigger a mirror pull
- name: add authorized_keys for hg user
  authorized_key: user=hg
                  key_options='command="/usr/local/bin/mirror-pull -t /repo_local/mozilla/mozilla $SSH_ORIGINAL_COMMAND",no-pty,no-x11-forwarding,no-agent-forwarding'
                  key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDoGUKeheEfmCr0GXxt3DyFXjmxzE9y1z0l1laNjNl6X++1ymj9MwrrSPewDJ+fzKWl+/1tFf9LwHlnndJib4DKrcqdzvJeU1CYBQ+xt9sk0DZdizcaCpYJI4Dpk9ysGLUOd3km9dp7LsXjJ/c6NQdZpICOnCWvBOwTgg++wUfBCymMpi2mab+QhUjDcBp/LUbJOtvEE/cppvDLMATmJfIaaGCNfka2TGVRec744UC6RqahZ/mcxe6TnltqujYjo1yBMGJ4gS2rAw5U+0nLqDiBpc6+uU3sjSsAe6/UrwfE+uu6vPFyFTaitK5oHHIt2MDJHkJruyJLNtd3ooqtyXcf"

# We run a lot of our Python out of our virtualenvs because that is how you
# are supported to do Python.
- name: create virtualenv for hgweb
  include: ../../../tasks/virtualenv.yml
           venv=/var/hg/venv_hgweb
           requirements=../roles/hg-web/files/requirements-hgweb.txt

- name: create virtualenv for replication
  include: ../../../tasks/virtualenv.yml
           venv=/var/hg/venv_replication
           requirements=../roles/hg-web/files/requirements-replication.txt

- name: create virtualenv for tools
  include: ../../../tasks/virtualenv.yml
           venv=/var/hg/venv_tools
           requirements=../roles/hg-web/files/requirements-tools.txt


- name: set up version-control-tools repo (server only)
  hg: repo=https://hg.mozilla.org/hgcustom/version-control-tools
      dest=/var/hg/version-control-tools
      revision={{ lookup('file', '../../../../.vctnode') }}
      force=yes
      purge=yes
      executable=/var/hg/venv_hgweb/bin/hg
  when: vct_dir.stat.exists == False

# The hg module's purge doesn't delete ignored files. Boo. Force that
# because old .pyc files may cause chaos.
- name: delete ignored files from version-control-tools repo
  command: /var/hg/venv_hgweb/bin/hg --config extensions.purge= -R /var/hg/version-control-tools purge --all
  when: vct_dir.stat.exists == False

- name: rsync version-control-tools repo (Docker only)
  command: /usr/bin/rsync -a --delete-after /vct/ /var/hg/version-control-tools/
  when: vct_dir.stat.exists == True

- name: set up hg-experimental repo, with 3rd party extensions
  hg: repo=https://bitbucket.org/facebook/hg-experimental
      dest=/var/hg/hg-experimental
      revision=8af0e065c0099abfd17321c41351b2aacad7668d
      force=yes
      purge=yes
      executable=/var/hg/venv_hgweb/bin/hg

- name: delete ignored files from hg-experimental repo
  command: /var/hg/venv_hgweb/bin/hg --config extensions.purge= -R /var/hg/hg-experimental purge --all

- name: build C extensions from hg-experimental repo
  command: /var/hg/venv_tools/bin/python setup.py build_ext -i chdir=/var/hg/hg-experimental

- name: install linelog C extension into hgweb virtualenv
  command: cp -a /var/hg/hg-experimental/linelog.so /var/hg/venv_hgweb/lib/python2.7/site-packages/linelog.so

# pip doesn't reinstall the same version unless --upgrade is passed.
# We need to pass --no-deps to prevent dependencies from getting pulled
# in. If we did pull in dependencies, there is a potential MITM since
# pip secures download of 3rd party packages.
# --force-reinstall is there for completeness.
- name: install vcsreplicator into virtualenv
  command: /var/hg/venv_replication/bin/pip install --upgrade --no-deps --force-reinstall /var/hg/version-control-tools/pylib/vcsreplicator

# Various hgrc files reference hooks via "python:mozhghooks.*". Install
# a link in the replication virtualenv to the path to these hooks inside
# the version-control-tools checkout.
- name: add mozhghooks to virtualens
  copy: dest=/var/hg/{{ item }}/lib/python2.7/site-packages/mozhghooks.pth
        content=/var/hg/version-control-tools/hghooks
        owner=root
        group=root
        mode=0644
  with_items:
    - venv_replication
    - venv_tools

# Settings from this file are inherited by every hg command run on the
# system.
- name: install global hgrc
  copy: src=hgrc dest=/etc/mercurial/hgrc mode=0644 owner=root group=root

- name: install fastannotate hgrc recipe
  copy: src=hgrc-fastannotate
        dest=/etc/mercurial/hgrc-fastannotate
        mode=0644
        owner=root
        group=root

# Needed to sniff clients as coming from AWS.
- name: install AWS IP ranges file
  copy: src=files/aws-ip-ranges.json
        dest=/etc/mercurial/aws-ip-ranges.json
        mode=0644
        owner=root
        group=root

# We control httpd.conf for features like server-status
- name: install httpd.conf file
  template: src=httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf

- name: directory for httpd logs
  file: path=/var/log/httpd/hg.mozilla.org
        state=directory
        owner=root
        group=root
        mode=0755

- name: install mirror-pull script
  template: src=mirror-pull.j2
            dest=/usr/local/bin/mirror-pull
            owner=root
            group=root
            mode=0755

- name: install scripts for supporting replication
  copy: src={{ item }}
        dest=/usr/local/bin/{{ item }}
        owner=root
        group=root
        mode=0755
  with_items:
    - lockfile

- name: install mirroring SSH key
  copy: dest=/etc/mercurial/mirror
        content="{{ mirror_private_key }}"
        owner=hg
        group=hg
        mode=0400

# We don't use the known_hosts module because it can't purge extra
# entries from the file. We should never have extra entries and extra
# entries could arguably be a security risk, so replacing the entire
# file content is acceptable.
- name: register SSH host keys for mirror host
  template: dest=/home/hg/.ssh/known_hosts
            src=known_hosts.j2
            owner=hg
            group=hg
            mode=640

# /repo/hg/webroot_wsgi has most of its content vendored inside
# version-control-tools. The content of the users/ directory is generated
# by a CRON that runs every few minutes.
- name: synchronize wsgi files
  command: /usr/bin/rsync -a --delete --filter='P users/' /var/hg/version-control-tools/hgwsgi/ /repo/hg/webroot_wsgi/

- name: set ownership of wsgi files
  command: /bin/chown -R hg:hg /repo/hg/webroot_wsgi

- name: install the script that creates user repo wsgi files
  copy: src=make_user_wsgi_dirs.sh dest=/usr/local/bin/make_user_wsgi_dirs.sh mode=0755

- name: install the cronjob that runs the user repo wsgi file creation script
  cron: minute="*/2" user=hg job="/usr/local/bin/make_user_wsgi_dirs.sh" name="Generate user wsgi files"

- name: add logrotate httpd config
  copy: src=logrotate.conf dest=/etc/logrotate.d/hg-httpd-logrotate

# Create and manage hg log resources
- name: make log dir
  file: path=/var/log/hg
        state=directory
        mode=0755
        owner=root
        group=root

- name: add logrotate hg config
  copy: src=logrotate.hg.conf dest=/etc/logrotate.d/hg

# TODO ideally this is integrated into logrotate.
# We schedule for UTC 0100 to catch any long-running requests that started
# on the previous UTC day.
- name: create CRON to generate daily Mercurial log files
  cron: name='Daily Mercurial log data'
        user=root
        job='/bin/nice -n 10 /var/hg/version-control-tools/scripts/outputif /var/hg/version-control-tools/hgext/serverlog/scripts/generate-daily-logs.py'
        day=*
        month=*
        minute=0
        hour=1

# logrotate is heavily biased towards rotating logs. We don't explicitly do
# rotation for /var/log/hg/parsed.YYYY-MM-DD, so logrotate doesn't work as a
# tool. We've written out own script to do the compression and deletion.

- name: create CRON to compress and delete old parsed Mercurial log files
  cron: name='Clean old parsed Mercurial logs'
        user=root
        job='/var/hg/version-control-tools/scripts/outputif /var/hg/version-control-tools/scripts/cleanup-parsed-hg-logs'
        day=*
        month=*
        minute=12
        hour=2

# moz.build evaluation occurs in a chroot with a specific control group
# to limit potential for danger. We have a dedicated user and establish
# a cgroup policy that all processes for that user go in the limited
# cgroup.
#
# This doesn't currently work in Docker because we don't have cgroups
# exposed to our Docker containers.

- name: create mozbuild user
  user: name=mozbuild

- name: control group for mozbuild evaluation
  copy: src=cgconfig-mozbuild.conf
        dest=/etc/cgconfig.d/mozbuild.conf
        owner=root
        group=root
        mode=0664
  notify: restart cgconfig

- name: configure cgconfig to run at system startup
  command: /usr/bin/systemctl enable cgconfig.service
  when: vct_dir.stat.exists == False

- name: install control group rules
  copy: src=cgrules.conf
        dest=/etc/cgrules.conf
        owner=root
        group=root
        mode=0664

- name: start control group rules service
  service: name=cgred state=started enabled=yes
  when: vct_dir.stat.exists == False

- name: directories for mozbuild chroot
  file: path={{ item }} state=directory owner=root group=root mode=0775
  with_items:
    - /repo/hg/chroot_mozbuild

# Files dropped from the chroot will still exist. This shouldn't be
# problematic. Ignore it until it becomes a problem.
- name: upload and extract chroot archive
  unarchive: src={{ vct }}/chroot_mozbuild/chroot.tar.gz
             dest=/repo/hg/chroot_mozbuild
  when: chroot_mozbuild_exists

# It is important for this binary to be located *outside* the chroot
# because if code inside the chroot is able to modify the binary, it
# will be able to execute as root given the caps policy
# Group ownership of "hg" allows hgweb processes to run executable.
- name: upload chroot evaluator binary
  copy: src={{ vct }}/chroot_mozbuild/mozbuild-eval
        dest=/usr/local/bin/mozbuild-eval
        owner=root
        group=hg
        mode=0750
  when: chroot_mozbuild_exists

- name: give mozbuild-eval elevated privileges
  command: "/usr/sbin/setcap cap_sys_admin,cap_sys_chroot,cap_setuid,cap_setgid=+ep /usr/local/bin/mozbuild-eval"
  when: chroot_mozbuild_exists

- name: install sudoers policy for mozbuild-eval
  copy: src=sudoers-mozbuild-eval
        dest=/etc/sudoers.d/mozbuild-eval
        owner=root
        group=root
        mode=0440

- name: mount point for repos
  file: path={{ item }} state=directory owner=hg group=hg mode=0755
  with_items:
    - /repo/hg/chroot_mozbuild/repo/hg/mozilla

# In order to get a read-only bind mount, we have to first do a regular
# bind mount then do a remount. This is managed by multiple systemd units.
- name: systemd unit files for repo bind bound (servers only)
  copy: src={{ item }}
        dest=/etc/systemd/system/{{ item }}
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False
  with_items:
    - repo_local-mozilla-chroot_mozbuild-repo-hg-mozilla.mount
    - repo_local-mozilla-chroot_mozbuild-dev.mount
    - repo_local-mozilla-chroot_mozbuild-dev-urandom.service
    - hg-bind-mount.service

- name: bind mount units are enabled (server only)
  service: name={{ item }}
           enabled=yes
           state=started
  with_items:
    - repo_local-mozilla-chroot_mozbuild-repo-hg-mozilla.mount
    - repo_local-mozilla-chroot_mozbuild-dev.mount
    - repo_local-mozilla-chroot_mozbuild-dev-urandom.service
    - hg-bind-mount.service
  when: vct_dir.stat.exists == False

- name: synchronize hg templates
  command: /usr/bin/rsync -a --delete-after /var/hg/version-control-tools/hgtemplates/ /repo/hg/hg_templates/

- name: advertise current v-c-t changeset in hgweb
  replace: dest=/repo/hg/hg_templates/gitweb_mozilla/footer.tmpl
           regexp={{ item.search }}
           replace={{ item.replace }}
  with_items:
    - { search: VCTNODE, replace: "{{ vct_node | mandatory }}" }
    - { search: DEPLOYDATE, replace: "{{ ansible_date_time.iso8601 }}" }

- name: adjust file permissions for hg templates
  command: /bin/chown -R hg:hg /repo/hg/hg_templates

- name: copy vcsreplicator config
  template: src=vcsreplicator.ini.j2
            dest=/etc/mercurial/vcsreplicator.ini
            owner=root
            group=root
            mode=0644

- name: directory for vcsreplicator logs
  file: path=/var/log/vcsreplicator
        state=directory
        owner=root
        group=root
        mode=0755

- name: systemd service file for vcsreplicator
  copy: src=vcsreplicator@.service
        dest=/etc/systemd/system/vcsreplicator@.service
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: vcsreplicator service is enabled (server only)
  service: name=vcsreplicator@{{ item }}.service
           enabled=yes
  with_items:
    - '0'
    - '1'
    - '2'
    - '3'
    - '4'
    - '5'
    - '6'
    - '7'
  when: vct_dir.stat.exists == False

- name: restart vcsreplicator daemons (server only)
  command: /usr/bin/systemctl restart vcsreplicator@*.service
  when: vct_dir.stat.exists == False

- name: create Nagios config directory
  file: path=/etc/nagios/nrpe.d
        state=directory
        owner=root
        group=root
        mode=0755

- name: install check_vcsreplicator_lag NRPE config
  copy: src=check_vcsreplicator_lag.cfg
        dest=/etc/nagios/nrpe.d/check_vcsreplicator_lag.cfg
        owner=root
        group=root
        mode=0644
  notify: restart nrpe

# Needs to come near end for fresh server provisioning scenario to work
# right.
- name: ensure httpd service enabled and running (server only)
  service: name=httpd.service
           enabled=yes
           state=started
  # Don't do this on Docker because it has its own mechanism for
  # starting.
  when: vct_dir.stat.exists == False
