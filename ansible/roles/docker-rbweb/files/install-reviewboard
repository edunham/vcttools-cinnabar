#!/venv/bin/python -u
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import os
import subprocess
import sys

ROOT = '/reviewboard'

os.environ['HOME'] = '%s/data' % ROOT
sys.path.insert(0, '%s/conf' % ROOT)

# Ensure settings allow proper access.
lines = open('%s/conf/settings_local.py' % ROOT, 'rb').readlines()
with open('%s/conf/settings_local.py' % ROOT, 'wb') as fh:
    # We would ideally set logging_directory via site config, but Djblets
    # isn't allowing us to set a string value to a None type. Derp.
    log_directory_found = False
    for line in lines:
        if line.startswith(b'ALLOWED_HOSTS'):
            line = b'ALLOWED_HOSTS = ["*"]\n'
        elif line.startswith(b'PRODUCTION'):
            line = b'PRODUCTION = False\n'
        elif line.startswith(b'DEBUG ='):
            line = b'DEBUG = False\n'
        elif line.startswith(b'LOGGING_DIRECTORY'):
            line = b'LOGGING_DIRECTORY = "%s/logs"\n' % ROOT
            log_directory_found = True

        fh.write(line)

    if not log_directory_found:
        fh.write('LOGGING_DIRECTORY = "%s/logs"\n' % ROOT)

from reviewboard.cmdline.rbsite import Site

cc = subprocess.check_call

class FakeOptions(object):
    copy_media = False

site = Site(ROOT, FakeOptions())

site.run_manage_command('syncdb', ['--noinput'])

site.setup_settings()
from reviewboard import initialize
initialize()

# We need to toggle disable/enable state to get first run code to run.
# We should *not* carry this pattern forward to production, because it may
# have undesirable consequences.
#
# TODO this appears to add ~1s overhead. Consider putting this behavior
# behind a flag.
print('disabling extensions')
site.run_manage_command('disable-extension',
                        ['mozreview.extension.MozReviewExtension'])
site.run_manage_command('disable-extension',
                        ['rbmotd.extension.MotdExtension'])

print('enabling extensions')
site.run_manage_command('enable-extension', ['mozreview.extension.MozReviewExtension'])
site.run_manage_command('enable-extension', ['rbmotd.extension.MotdExtension'])


# Hook up Bugzilla authentication.
site.run_manage_command('set-siteconfig', ['--key=auth_backend',
                        '--value=bugzilla'])

site.run_manage_command('set-siteconfig', ['--key=logging_enabled',
                        '--value=1'])

# Ensure admin user is hooked up to Bugzilla.
from django.contrib.auth.models import User
from mozreview.models import BugzillaUserMap
u = User.objects.get(email='admin@example.com')
u.password='!'
u.save()
try:
    BugzillaUserMap.objects.get(bugzilla_user_id=1)
except BugzillaUserMap.DoesNotExist:
    bum = BugzillaUserMap(user=u, bugzilla_user_id=1)
    bum.save()

# Set sane permissions (since we run as root).
cc(['/bin/chown', '-R', 'reviewboard:reviewboard', ROOT])
