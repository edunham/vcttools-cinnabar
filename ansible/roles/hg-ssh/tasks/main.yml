---
- name: determine if running in Docker
  stat: path=/vct
  register: vct_dir

- include: ../../../tasks/systemd-mail-unit-output.yml
  when: vct_dir.stat.exists == False

# This is needed so authconfig can have the appropriate ldap_uri at container
# start time, which results in /etc/openldap/ldap.conf getting updated
# appropriately, which is necessary for nscd and `ldapsearch` to
# "just work."
- name: find LDAP URI in Docker
  set_fact: ldap_uri=ldap://{{ ansible_env.LDAP_PORT_389_TCP_ADDR }}:{{ ansible_env.LDAP_PORT_389_TCP_PORT }}/
  when: ansible_env.LDAP_PORT_389_TCP_ADDR is defined
  tags: docker-startup

- name: Install packages required to run a Mercurial server
  yum: name={{ item }} state=present
  with_items:
    - authconfig
    - nss-pam-ldapd
    - openldap-clients
    # Needed to build python-ldap package for virtualenv.
    - openldap-devel
    - openssh-server
    - python-devel
    - sudo
    - rsyslog
    - tar

# yum will incur network traffic when URLs are specified. Download the
# package locally first so we can run offline after initial bootstrap.
- name: download Mozilla rpms
  get_url: url=https://s3-us-west-2.amazonaws.com/moz-packages/CentOS7/{{ item.path }}
           dest=/var/tmp/{{ item.path }}
           sha256sum={{ item.sha256 }}
  with_items:
    - { path: mercurial-3.7.3-1.x86_64.rpm, sha256: 7cdd06e8fb5266fe9bd726c79db6040b68053a601daecb2418820c1d3e4f56a2 }

- name: install Mozilla rpms
  command: yum localinstall -y /var/tmp/mercurial-3.7.3-1.x86_64.rpm

- name: create directory for LDAP certificates
  file: path=/etc/openldap/cacerts
        state=directory
        owner=root
        group=root
        mode=0755

- name: install Mozilla certificates
  copy: src={{ item.src }}
        dest=/etc/openldap/cacerts/{{ item.dest }}
        owner=root
        group=root
        mode=0644
  with_items:
    - { src: files/mozilla-root-ca.crt, dest: mozilla.crt }
    - { src: files/mozilla-root-certificate-services.crt, dest: ca.crt }

- name: configure system authentication settings
  template: src=nslcd.conf.j2
            dest=/etc/nslcd.conf
  tags: docker-startup

- name: run authconfig
  command: /usr/sbin/authconfig --enablemkhomedir --enableldap --enableldapauth --ldapserver={{ ldap_uri }} --ldapbasedn={{ basedn }} --updateall
  tags: docker-startup

- name: ensure nslcd service enabled and running (server only)
  service: name=nslcd.service
           enabled=yes
           state=started
  when: vct_dir.stat.exists == False

- name: configure sshd
  copy: src=sshd_config
        dest=/etc/ssh/sshd_config
  notify: restart sshd
  tags: docker-startup

- name: generate SSH host keys (Docker only)
  command: /usr/bin/ssh-keygen -A -N ''
  when: vct_dir.stat.exists == True

- name: install global ssh config
  copy: src=ssh_config
        dest=/etc/ssh/ssh_config
        owner=root
        group=root
        mode=0640

- name: Create groups for SCM ACLs
  group: name={{ item.name }} gid={{ item.gid }}
  with_items:
    - { name: 'scm_level_1', gid: 673 }
    - { name: 'scm_level_2', gid: 685 }
    - { name: 'scm_level_3', gid: 679 }
    - { name: 'scm_l10n', gid: 678 }
    - { name: 'scm_l10n_infra', gid: 680 }
    - { name: 'scm_sec_sensitive', gid: 686 }
    - { name: 'scm_ecmascript', gid: 687 }
    - { name: 'hg-aggregate', gid: 5601 }
    - { name: 'hg-notifier', gid: 5603 }

- name: Create hg group
  group: name=hg
         gid=500

- name: Create hg user
  user: name=hg
        group=hg
        uid=500
        shell=/bin/bash
        comment='Hg user'

- name: create users for hg services
  user: name={{ item.name }}
        group={{ item.name }}
        uid={{ item.uid }}
  with_items:
    - { name: 'hg-aggregate', uid: 5601 }
    - { name: 'hg-notifier', uid: 5603 }

- name: install hg-master.target systemd unit
  copy: src=hg-master.target
        dest=/etc/systemd/system/hg-master.target
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: hg user ssh config is prepared
  file: path=/home/hg/.ssh state=directory mode=0775 owner=hg group=hg

- name: mercurial config directory is present
  file: path=/etc/mercurial state=directory mode=0755

- name: directory for hg sshd files
  file: path=/etc/mercurial/ssh
        state=directory
        owner=root
        group=root
        mode=0750

- name: sshd config for hg server
  template: src=sshd_config_hg.j2
            dest=/etc/mercurial/ssh/sshd_config
            owner=root
            group=root
            mode=0640

# entrypoint.py from the docker container will generate these keys. But there is
# a race condition between it and the startup code in hgmo.py wanting to copy
# the file. So generate the cert at image build time to be on the safe side.
- name: generate hg ED25519 host key (Docker only)
  command: /usr/bin/ssh-keygen -t ed25519 -N '' -f /etc/mercurial/ssh/ssh_host_ed25519_key creates=/etc/mercurial/ssh/ssh_host_ed25519_key.pub

- name: generate hg RSA host key (Docker only)
  command: /usr/bin/ssh-keygen -t rsa -b 4096 -N '' -f /etc/mercurial/ssh/ssh_host_rsa_key creates=/etc/mercurial/ssh/ssh_host_rsa_key.pub

# In order to be used as an AuthorizedKeysCommand in sshd, the
# file has to be in a tree that is root:root 0755 all the way to /.
- name: install ldap ssh key lookup script
  copy: src={{ vct }}/scripts/ldap-lookup-ssh-key
        dest=/usr/local/bin/ldap-lookup-ssh-key
        owner=root
        group=root
        mode=0755

- name: systemd service file for hg sshd
  copy: src=sshd_hg.service
        dest=/etc/systemd/system/sshd_hg.service
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: ensure hg sshd runs on startup
  service: name=sshd_hg.service
           enabled=yes
           state=started
  when: vct_dir.stat.exists == False

- name: directories for support tools is present
  file: path=/usr/local/bin
        state=directory
        owner=root
        group=root
        mode=0755

- name: install pash configuration file
  template: src=pash.json.j2
            dest=/etc/mercurial/pash.json
            owner=root
            group=root
            mode=0644

- name: replication SSH key is present
  command: /usr/bin/ssh-keygen -b 4096 -f /etc/mercurial/mirror -t rsa -N '' creates=/etc/mercurial/mirror

- name: capture content of replication SSH key
  slurp: src=/etc/mercurial/mirror.pub
  register: mirror_ssh_key_public

- name: ensure proper permissions on replication key
  file: path={{ item }} owner=hg group=hg
  with_items:
    - /etc/mercurial/mirror
    - /etc/mercurial/mirror.pub

- name: hg user has replication key configured in authorized_keys
  copy: dest=/home/hg/.ssh/authorized_keys
        content="{{ mirror_ssh_key_public.content | b64decode }}"
        owner=hg
        group=hg
        mode=0640

- name: known hosts file for mirrors is populated
  template: src=known_hosts.j2
            dest=/etc/mercurial/known_hosts
            owner=hg
            group=hg
            mode=0660

- name: list of mirrors file is populated
  template: src=mirrors.j2
            dest=/etc/mercurial/mirrors
            owner=root
            group=root
            mode=0644

- name: Mercurial repository directories are present
  file: path={{ item }} state=directory mode=0775
  with_items:
    - /repo/hg/mozilla
    - /var/hg

- name: User repository directories are present
  file: path=/repo/hg/mozilla/users state=directory mode=0775 owner=hg group=scm_level_1

- name: create virtualenv for pash
  include: ../../../tasks/virtualenv.yml
           venv=/var/hg/venv_pash
           requirements=../roles/hg-ssh/files/requirements-pash.txt

- name: create virtualenv for tools
  include: ../../../tasks/virtualenv.yml
           venv=/var/hg/venv_tools
           requirements=../roles/hg-ssh/files/requirements-tools.txt

# Hooks are referenced in various hgrc files via "python:mozhghooks.*".
# This means they are imported as Python modules from the "mozhghooks"
# package. We create a .pth file telling the virtualenv that
# all hooks are located in the version-control-tools checkout.
#
# The vcsreplicator Python package contains support code for managing
# replication. Also add it to the virtualenv.
- name: add packages to virtualenvs
  copy: dest=/var/hg/{{ item.venv }}/lib/python2.7/site-packages/{{ item.pth }}.pth
        content=/var/hg/version-control-tools/{{ item.path }}
        owner=root
        group=root
        mode=0644
  with_items:
    - { venv: venv_pash, path: hghooks, pth: mozhghooks }
    - { venv: venv_tools, path: hghooks, pth: mozhghooks }
    - { venv: venv_pash, path: pylib/vcsreplicator, pth: vcsreplicator }
    - { venv: venv_tools, path: pylib/vcsreplicator, pth: vcsreplicator }

- name: determine if v-c-t clone is present
  stat: path=/var/hg/version-control-tools/.hg
  register: vct_clone

- name: create v-c-t clone (server only)
  command: /var/hg/venv_tools/bin/hg --config extensions.vcsreplicator=! clone https://hg.mozilla.org/hgcustom/version-control-tools /var/hg/version-control-tools
  when: vct_dir.stat.exists == False and vct_clone.stat.exists == False

- name: pull version-control-tools repo (server only)
  command: /var/hg/venv_tools/bin/hg --config extensions.vcsreplicator=! -R /var/hg/version-control-tools pull https://hg.mozilla.org/hgcustom/version-control-tools
  when: vct_dir.stat.exists == False

- name: update version-control-tools repo (server only)
  command: /var/hg/venv_tools/bin/hg -R /var/hg/version-control-tools up -r {{ lookup('file', '../../../../.vctnode') }}
  when: vct_dir.stat.exists == False

- name: delete ignored files from version-control-tools repo
  command: /var/hg/venv_tools/bin/hg --config extensions.purge= -R /var/hg/version-control-tools purge --all
  when: vct_dir.stat.exists == False

- name: rsync version-control-tools repo (Docker only)
  command: /usr/bin/rsync -a --delete-after /vct/ /var/hg/version-control-tools/
  when: vct_dir.stat.exists == True

- name: ensure version-control-tools permissions are sane (Docker only)
  command: /bin/chmod -R a+r /var/hg/version-control-tools
  when: vct_dir.stat.exists == True

- name: install vcsreplicator into virtualenv
  command: /var/hg/venv_tools/bin/pip install --upgrade --no-deps --force-reinstall /var/hg/version-control-tools/pylib/vcsreplicator

- name: install rsyslog policy for hg
  copy: src=rsyslog-hg.conf
        dest=/etc/rsyslog.d/hg.conf
        owner=root
        group=root
        mode=0644
  notify: restart rsyslogd

- name: install logrotate config for hg
  copy: src=logrotate-hg.conf
        dest=/etc/logrotate.d/hg
        owner=root
        group=root
        mode=0644

- name: Mercurial log files are present and writable
  file: path={{ item }} mode=0666 state=touch
  with_items:
    - /var/log/hg-push.log
    - /var/log/pash.log

- name: sudoers policy for repo-push is in place
  copy: src=repo-push.sudoers dest=/etc/sudoers.d/repo-push

- name: global Mercurial configs are in place
  template: src={{ item }}.j2
            dest=/etc/mercurial/{{ item }}
            mode=0664
            owner=root
            group=root
  with_items:
    - hgrc
    - notifications.ini
    - pushdataaggregator.ini

# pash is a collection of Python files handling SSH connections. They behave
# like a Python module but are installed not as such for historical reasons.
- name: install pash
  copy: src={{ vct }}/hgserver/pash/{{ item }}
        dest=/usr/local/bin/{{ item }}
        owner=root
        group=root
        mode=0755
  with_items:
    # Install pash.py first to ensure SSH root login works.
    - pash.py
    - hg_helper.py
    - ldap_helper.py
    - pash_wrapper
    - repo_group.py
    - sh_helper.py

# Until reviewboard-hg switches to CentOS 7, pash.py's shebang needs to be
# adjusted to run from the virtualenv. We purposefully use /usr/bin/python
# in the shebang by default because we can't rely on the virtualenv being
# present during fresh installs. If we didn't do this, we'd easily lock
# ourselves out of root login.
- name: replace shebang in pash.py
  replace: dest=/usr/local/bin/pash.py
           regexp='^#! \/usr\/bin\/python'
           replace='#!/var/hg/venv_pash/bin/python'

- name: install repo-push script
  copy: src={{ vct }}/scripts/repo-push.sh
        dest=/usr/local/bin/repo-push.sh
        owner=root
        group=root
        mode=0755

- name: ensure bundles directory exists
  file: path=/repo/bundles
        state=directory
        owner=hg
        group=hg
        mode=0775

- name: write list of repositories to generate bundles for
  copy: src=bundle-repos
        dest=/repo/bundles/repos
        owner=hg
        group=hg
        mode=0644

- name: install repo unify config files
  copy: src={{ item }}
        dest=/etc/mercurial/{{ item }}
        owner=root
        group=root
        mode=0644
  with_items:
    - unify-firefox-unified.ini
    - unify-firefox-unified-b2g.ini
    - unify-mozilla-central-gd.ini
    - unify-mozilla-unified.ini

- name: sysconfig file for unify repo daemon
  copy: src=sysconfig-unifyrepo
        dest=/etc/sysconfig/unifyrepo
        owner=root
        group=root
        mode=0644

- name: systemd service file for unify repo daemon
  copy: src=unifyrepo.service
        dest=/etc/systemd/system/unifyrepo.service
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: restart unifyrepo.service (server only)
  command: /usr/bin/systemctl restart unifyrepo.service
  when: vct_dir.stat.exists == False
  ignore_errors: True

- name: systemd service for bundle generation
  copy: src=hg-bundle-generate.{{ item }}
        dest=/etc/systemd/system/hg-bundle-generate.{{ item }}
        owner=root
        group=root
        mode=0644
  with_items:
    - service
    - timer
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

# Ideally, we would have separate override files for each service. But
# it doesn't appear systemd allows there to be a generic e.g.
# mail-unit-output@.service and an instance e.g.
# mail-unit-output@hg-bundle-generate.service.d

- name: create directory mail-unit-output override file
  file: path=/etc/systemd/system/mail-unit-output@.service.d
        state=directory
        owner=root
        group=root
        mode=0755

- name: install mail-unit-output override
  copy: src=mail-unit-output-override.conf
        dest=/etc/systemd/system/mail-unit-output@.service.d/override.conf
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: create directory for Nagios files
  file: path={{ item }}
        state=directory
        owner=root
        group=root
        mode=0755
  with_items:
    - /etc/nagios/nrpe.d
    - /usr/lib64/nagios/plugins/custom

- name: install Nagios check for hg writing into kafka
  copy: src=check_kafka_hg_heartbeat
        dest=/usr/lib64/nagios/plugins/custom/check_kafka_hg_heartbeat
        owner=root
        group=root
        mode=0755

- name: install NRPE check configs
  copy: src={{ item }}
        dest=/etc/nagios/nrpe.d/{{ item }}
        owner=root
        group=root
        mode=0644
  with_items:
    - check_kafka_hg_heartbeat.cfg
    - check_pulsenotifier_lag.cfg
    - check_pushdataaggregator_lag.cfg
  notify: restart nrpe.service

- name: systemd service file for push data aggregation daemon
  copy: src=pushdataaggregator.service
        dest=/etc/systemd/system/pushdataaggregator.service
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: restart pushdataaggregator.service (server only)
  command: /usr/bin/systemctl restart pushdataaggregator.service
  when: vct_dir.stat.exists == False
  ignore_errors: True

- name: systemd service file for pulse notification daemon
  copy: src=pulsenotifier.service
        dest=/etc/systemd/system/pulsenotifier.service
        owner=root
        group=root
        mode=0644
  notify: systemd daemon reload
  when: vct_dir.stat.exists == False

- name: restart pulsenotifier.service (server only)
  command: /usr/bin/systemctl restart pulsenotifier.service
  when: vct_dir.stat.exists == False
  ignore_errors: True
