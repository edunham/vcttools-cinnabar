#!/repo/hg/venv_tools/bin/python2.7
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# This is a NRPE check that verifies we can write a heartbeat message to
# the VCS replication topic.

import logging
import subprocess
import sys

from kafka.client import KafkaClient
from kafka.common import KafkaError
import vcsreplicator.producer as vcsrproducer

HG = '/repo/hg/venv_tools/bin/hg'

# Prevent "No handlers could be found" warnings.
kafkalogger = logging.getLogger('kafka')
if not kafkalogger.handlers:
    kafkalogger.addHandler(logging.NullHandler())

config = {}

try:
    out = subprocess.check_output([HG, 'config'])

    for line in out.splitlines():
        k, v = line.split('=', 1)
        config[k] = v
except subprocess.CalledProcessError as e:
    print('CRITICAL - unable to load hgrc')
    sys.exit(2)
except ValueError:
    print('CRITICAL - unable to parse hg config')
    sys.exit(2)

try:
    client_id = config['replicationproducer.clientid']
    topic = config['replicationproducer.topic']
    hosts = config['replicationproducer.hosts']
    req_acks = int(config['replicationproducer.reqacks'])
    ack_timeout = int(config['replicationproducer.acktimeout'])
except (KeyError, ValueError):
    print('CRITICAL - replication configuration not present')
    sys.exit(2)

try:
    client = KafkaClient(hosts, client_id=client_id, timeout=10)
    producer = vcsrproducer.Producer(
        client, topic, batch_send=False, req_acks=req_acks,
        ack_timeout=ack_timeout
    )
except KafkaError as e:
    print('CRITICAL - cannot establish connection to Kafka')
    print('')
    print(e)
    print('')
    print('This error should only occur if the Kafka cluster is down or')
    print('if the server configuration is invalid. Please report this error')
    print('in #vcs or to oncall ASAP.')
    sys.exit(2)

total_count = len(client.topic_partitions[topic])
success_count = 0
for partition, pm in sorted(client.topic_partitions[topic].items()):
    try:
        vcsrproducer.send_heartbeat(producer, partition=partition)
        success_count += 1
    except KafkaError as e:
        leader = client.brokers[pm.leader]

        if hasattr(e, 'errno') and hasattr(e, 'message'):
            message = e.message
        else:
            message = 'unknown'

        print('CRITICAL - error writing to partition %d (leader: %s): %s' %
              (partition, leader.host, message))
        print(e)

if success_count == total_count:
    print('OK - heartbeat message sent to %d/%d partitions successfully' %
          (success_count, total_count))
    sys.exit(0)

print('We were unable to write a heartbeat message into the replication')
print('log. This likely means incoming pushes will not complete since they')
print('will not be able to write to the replication log.')
print('')
print('Please report this failure to #vcs or notify oncall ASAP.')

sys.exit(2)
