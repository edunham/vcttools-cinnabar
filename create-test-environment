#!/bin/bash

set -e

vercheck=`python -c 'import sys; print(sys.version_info[0:3] >= (2, 7, 9))'`
if [ "x${vercheck}" != "xTrue" ]; then
  echo "Python version too old. Test environment requires 2.7.9+"
  exit 1
fi

if [ ! -d venv ]; then
  virtualenv venv
fi

source venv/bin/activate
pip install --upgrade pip

cd pylib/requests
python setup.py develop
cd ../..

pip install --upgrade -r test-requirements.txt

cd pylib/Bugsy
python setup.py develop
cd ../..

cd pylib/mozansible
python setup.py develop
cd ../..

cd pylib/mozhginfo
python setup.py develop
cd ../..

cd pylib/mozautomation
python setup.py develop
cd ../..

cd pylib/mozreview
python setup.py develop
cd ../..

cd pylib/mozreviewbots
python setup.py develop
cd ../..

cd pylib/rbbz
python setup.py develop
cd ../..

cd pylib/vcsreplicator
python setup.py develop
cd ../..

cd hghooks
python setup.py develop
cd ..

cd testing
python setup.py develop
cd ..

# Collect code coverage from all Python processes if environment variable
# is set.
cat > venv/bin/sitecustomize.py << EOF
import os

if os.environ.get('CODE_COVERAGE', False):
    import uuid
    import coverage

    covpath = os.path.join(os.environ['COVERAGE_DIR'],
        'coverage.%s' % uuid.uuid1())
    cov = coverage.coverage(data_file=covpath, auto_data=True)
    cov._warn_no_data = False
    cov._warn_unimported_source = False
    cov.start()
EOF

# Ensure system settings don't sneak in and change behavior.
export HGRCPATH=/dev/null

# Install various Mercurial versions for multi-version testing.
if [ ! -d venv/hg ]; then
  echo "Cloning Mercurial repository"
  hg clone https://selenic.com/repo/hg venv/hg
fi

hg -R venv/hg pull

mercurials=`pwd`/venv/mercurials

for old in 2.5.4 2.6 2.6.1 2.6.2 2.6.3 2.7 2.7.1 2.7.2 2.8 2.8.1 2.8.2 2.9 2.9.1 2.9.2 3.0 3.0.1 3.0.2 3.1 3.1.1 3.1.2 3.2 3.2.1 3.2.2 3.2.3 3.2.4 3.3 3.3.2 3.4 3.4.1 3.5 3.5.1 3.6; do
  rm -rf $mercurials/$old
done

for v in 3.3.3 3.4.2 3.5.2 3.6.2 3.7.1; do
  destdir=$mercurials/$v
  if [ ! -d $destdir ]; then
    cd venv/hg
    hg up $v
    # We don't care about support files, which only slow us down, so
    # install-bin is the only target we need.
    make install-bin PREFIX=$destdir
    hg --config extensions.purge= purge --all
    cd ../..
  fi
done

# Install the bleeding edge of Mercurial so we find regressions early.
rm -rf $mercurials/@
cd venv/hg
hg up @
make install-bin PREFIX=$mercurials/@
hg --config extensions.purge= purge --all
cd ../..
unset HGRCPATH
echo finished installing Mercurials

if [ ! -d venv/git-cinnabar ]; then
  echo "Cloning git-cinnabar"
  git clone --branch release https://github.com/glandium/git-cinnabar.git venv/git-cinnabar
fi

git -C venv/git-cinnabar pull

echo ""
echo "Building Docker images."
echo "This could take a while and may consume a lot of internet bandwidth."
echo "If you don't want Docker images, it is safe to hit CTRL+c to abort this."

./d0cker build-all || {
  echo "You will not be able to run tests that require Docker.";
  echo "Please see https://docs.docker.com/installation/ for how to install Docker.";
  echo "When Docker is installed, re-run this script";
}

echo finished creating test environment
