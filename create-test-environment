#!/bin/bash

set -e

if [ -n "$MOZREVIEW_BUILD_FORKS" ]; then
    # include --forks switch to build scripts
    FORKS="--forks=$MOZREVIEW_BUILD_FORKS"
else
    FORKS=''
fi

set +e
# Quick and dirty check for SSL support provided with this Python.  We check
# this way because some distros have backported the necessary SSL support
# into early Python versions, and we can't tell if we have what we need from
# the Python version alone.
python -c 'import ssl; ssl.SSLContext; ssl.PROTOCOL_TLSv1_2'
sslcheck=$?
set -e

if [ "$sslcheck" -ne 0 ]; then
  echo "Python version does not support verifying SSL certificates for secure"
  echo "downloads!  Please upgrade your version of Python."
  exit 1
fi

# We need node.js for tools required to package/install Review Board
# (eg. lessc, uglifyjs)
if ! type npm >/dev/null 2>&1; then
  echo "npm not found.  Please install node.js."
  exit 1
fi

# Some Linux distros use 'nodejs' instead of 'node' as the executable
if type node >/dev/null 2>&1; then
    node_bin=node
elif type nodejs >/dev/null 2>&1; then
    node_bin=nodejs
else
    echo "Failed to determine node executable name."
    exit 1
fi

# Check the node.js version - lessc needs 0.12
function version {
    echo "$@" | sed "s/^v//" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}
if [ $(version `${node_bin} -v`) -lt $(version "0.12") ]; then
    echo "WARNING node.js is too old."
    echo "WARNING Found $(${node_bin} -v), lessc wants v0.12+"
fi

# More annoyingly we need msgfmt which is part of gettext.
if ! type msgfmt >/dev/null 2>&1; then
  echo "msgfmt not found.  Please install the gettext package."
  echo "On OSX you can use homebrew to install this:"
  echo "  brew install gettext && brew link gettext --force"
  exit 1
fi

ROOT=`pwd`
VENV=${ROOT}/venv

if [ ! -d ${VENV} ]; then
  # There is a bug in pycrypto where it tries to invoke `configure` instead
  # of a path qualified configure. So if there is a "configure" on $PATH
  # it will invoke the wrong one.
  configure=which configure &>/dev/null || true
  if [ "x" != "x${configure}" ]; then
    echo "configure in PATH; pycrypto install will fail!"
    echo "Remove the path containing ${configure} from PATH"
    exit 1
  fi

  . ${ROOT}/testing/create-virtualenv
fi

cd ${ROOT}
source ${VENV}/bin/activate

cd pylib/requests
python setup.py develop
cd ../..

pip install --upgrade --require-hashes -r test-requirements.txt

if [ ! -d reviewboard-fork ]; then
  echo "Cloning Review Board"
  hg clone https://hg.mozilla.org/webtools/reviewboard reviewboard-fork
fi

if [ ! -d ${VENV}/node ]; then
    mkdir ${VENV}/node
fi
cd ${VENV}/node
npm init -y >/dev/null
npm install less uglifyjs
cd ${VENV}
for FN in lessc uglifyjs; do
    if [ ! -e bin/${FN} ]; then
        ln -s ../node/node_modules/.bin/${FN} bin/${FN}
    fi
done
cd ..

cd reviewboard-fork
hg pull -u
cd djblets
python setup.py develop
cd ../reviewboard
python setup.py develop
cd ../..

cd pylib/Bugsy
python setup.py develop
cd ../..

cd pylib/mozansible
python setup.py develop
cd ../..

cd pylib/mozhginfo
python setup.py develop
cd ../..

cd pylib/mozautomation
python setup.py develop
cd ../..

cd pylib/mozreview
python setup.py develop
cd ../..

cd pylib/vcsreplicator
python setup.py develop
cd ../..

cd hghooks
python setup.py develop
cd ..

cd testing
python setup.py develop
cd ..

# Collect code coverage from all Python processes if environment variable
# is set.
cat > venv/bin/sitecustomize.py << EOF
import os

if os.environ.get('CODE_COVERAGE', False):
    import uuid
    import coverage

    covpath = os.path.join(os.environ['COVERAGE_DIR'],
        'coverage.%s' % uuid.uuid1())
    cov = coverage.coverage(data_file=covpath, auto_data=True)
    cov._warn_no_data = False
    cov._warn_unimported_source = False
    cov.start()
EOF

# Ensure system settings don't sneak in and change behavior.
export HGRCPATH=/dev/null

# Install various Mercurial versions for multi-version testing.
if [ ! -d venv/hg ]; then
  echo "Cloning Mercurial repository"
  hg clone https://www.mercurial-scm.org/repo/hg venv/hg
fi

hg -R venv/hg pull

mercurials=`pwd`/venv/mercurials

for old in 3.0 3.0.1 3.0.2 3.1 3.1.1 3.1.2 3.2 3.2.1 3.2.2 3.2.3 3.2.4 3.3 3.3.2 3.3.3 3.4 3.4.1 3.4.2 3.5 3.5.1 3.5.2 3.6 3.6.2 3.7.1; do
  rm -rf $mercurials/$old
done

for v in 3.7.3 3.8.4 3.9.2; do
  destdir=$mercurials/$v
  if [ ! -d $destdir ]; then
    cd venv/hg
    hg up $v
    # We don't care about support files, which only slow us down, so
    # install-bin is the only target we need.
    make install-bin PREFIX=$destdir
    hg --config extensions.purge= purge --all
    cd ../..
  fi
done

# Install the bleeding edge of Mercurial so we find regressions early.
rm -rf $mercurials/@
cd venv/hg
hg up @
make install-bin PREFIX=$mercurials/@
hg --config extensions.purge= purge --all
cd ../..
unset HGRCPATH
echo finished installing Mercurials

if [ ! -d venv/git-cinnabar ]; then
  echo "Cloning git-cinnabar"
  git clone --branch release https://github.com/glandium/git-cinnabar.git venv/git-cinnabar
fi

cd venv/git-cinnabar
git pull
git submodule update --init
make -j4 helper NO_OPENSSL=1 NO_GETTEXT=1
cd ../..

if [ -z "${NO_DOCKER}" ]; then
  echo ""
  echo "Building Docker images."
  echo "This could take a while and may consume a lot of internet bandwidth."
  echo "If you don't want Docker images, it is safe to hit CTRL+c to abort this."

  ./d0cker build-all $FORKS || {
    echo "You will not be able to run tests that require Docker.";
    echo "Please see https://docs.docker.com/installation/ for how to install Docker.";
    echo "When Docker is installed, re-run this script";
    exit 1
  }
else
  echo "Not building Docker images because NO_DOCKER is set."
fi

echo finished creating test environment
